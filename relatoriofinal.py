# -*- coding: utf-8 -*-
"""RelatorioFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S4yxhfffpKlc8Z8Ko4iixXmbcHs1_XBR

#Projeto: Análise Exploratória de Dados de Câncer

Grupo:

Adriel Ferreira Trajano

Jéssica Chaves Nagahama

Kamily Assis de Oliveira

#Introdução

###**Motivação e Objetivos**

 Nosso projeto foi iniciado a fim de observar a variância dos dados sobre mortes causadas por Neoplasia (câncer) em diferentes faixas etarias ao redor do mundo, nos 3 países com maiores, e nos 3 países com menores, investimentos públicos em saúde, e a relação direta do investimento público com a quantidade de casos registrados até o ano de 2019.


  Temos como principal motivação, a partir da manipulação de dados para visualização facilitada, torná-los mais acessíveis ao público. Possibilitando, assim, que cada vez mais pessoas se tornem socialmente conscientes sobre a importância das políticas públicas no tratamento do Crescimento Desordenado de Células (Neoplasia).


###**A fim de satisfazer tais objetivos, elaborou-se as seguintes questões:**


1) Qual é a faixa etária que mais morre nesses países?

2) Para cada faixa etária, qual o país com a maior taxa?

3) Qual é o país mais constante? 

4) Qual é o país com maior queda de casos entre 2015 e 2019?

5) Qual o país que teve o maior crescimento, e qual teve o maior decrescimento, em suas taxas ao passar dos anos?

6) No ano de mais baixas, qual o país com maior, e qual o país com menor, investimento público em saúde?

### 1. Importando Bibliotecas
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn as sk

"""#Dataset 1 - Health Expenditure

*Descrição do dataset "Hare of Public Expenditure on Healthcare by Country"*

  Neste dataset tivemos acesso as informações de investimento em saúde pública de diversos países ao redor do mundo até 2019.

  Foi a partir da limpeza e manipulação dessas informações que tivemos acesso aos 6 países que serão estudados durante todo o processo em questão, são esses paises, do maior para o menor investimento:
 
Brunei                                                                         
Cuba                                                                           
Kiribati  
Guinea                           
Democratic Republic of Congo     
Afghanistan
"""

from google.colab import drive
drive.mount('/content/drive')

#he = health expenditure
df_he = pd.read_csv("/content/drive/MyDrive/Projeto ICD/share-of-public-expenditure-on-healthcare-by-country.csv")

df_he

"GHE = % Govt. Health Expenditure"
df_he = df_he.rename(columns={"Domestic general government health expenditure (% of current health expenditure)": "GHE", "Entity":"Country"})

df_he

colunas_he = df_he.columns[3:]

means_he = {}

for colunahe in colunas_he:
    means_he[colunahe] = df_he.groupby('Country')[colunahe].mean().sort_values(ascending=False)

    # Exibir as medias calculadas para cada coluna
for colunahe, medias_he in means_he.items():
    print(f"Media da coluna '{colunahe}':")
    print(medias_he)
    print()

agrupamento = pd.concat([medias_he.groupby('Country').head(3), medias_he.groupby('Country').tail(3)])
agrupamento

top3maior = medias_he.head(3)
top3menor = medias_he.tail(3)
top3_maior_menor = pd.concat([top3maior, top3menor])
top3_maior_menor

df_chosen = df_he.loc[(df_he["Country"].isin(top3_maior_menor.index))]
sns.lineplot(data=df_chosen, x="Year", y="GHE", linewidth=2.5, palette="tab10", hue="Country")

df_maior_menor = df.loc[(df["Country"].isin(top3_maior_menor.index))]
sns.lineplot(data=df_maior_menor, x="Year", y="50 < DNS < 69", linewidth=2.5, palette="tab10", hue="Country")

"""# Dataset 2 - Cancer Death Rates by Age

*Descrição do dataset "Cancer Death Rates by Age"*

  Neste dataset tivemos acesso as informações de casos de Neoplasia (câncer) até 2019, em diferentes faixas etárias nos países determinados no dataset acima.

  E a partir da limpeza e manipulação dessas informações fomos capazes de responder as problemáticas determinadas anteriormente.

##Exploração Inicial

### 2. Leitura e Pré-processamento de Dados

#### 2.1 Dataframe recebe CSV

Dataset 1: Taxas de mortalidade Por Idade
"""

df = pd.read_csv("/content/drive/MyDrive/Projeto ICD/cancer-death-rates-by-age.csv")

df

"""#### Criando um array com o nome de todas as entidades do Dataframe"""

valores_unicos = df['Entity'].unique()
valores_unicos

"""#### Separando as entidades que são regiões"""

#regions

array_regions = []

for palavra in valores_unicos:
    if 'Region' in palavra or 'WB' in palavra or 'WHO' in palavra:
        array_regions.append(palavra)

df_regions= pd.DataFrame(array_regions, columns=['Regions'])

print(df_regions)

"""#### Separando as entidades que são agrupamentos de países de acordo com a renda"""

#países de acordo com a renda
array_country_income = []

for palavra in valores_unicos:
    if 'Income' in palavra:
        array_country_income.append(palavra)

df_country_income= pd.DataFrame(array_country_income, columns=['Country Income'])

print(df_country_income)

"""#### Retirando as entidades que não são países"""

#retirando

# Obter os valores únicos da coluna 'Entity' que atendem ao critério
array_not_a_country = []

for palavra in valores_unicos:
    if 'G20' in palavra or 'WB' in palavra or 'WHO' in palavra or 'Income' in palavra:
        array_not_a_country.append(palavra)

df_not_a_country = pd.DataFrame(array_not_a_country, columns=['Not a Country'])

df_not_a_country

# Eliminar os valores presentes em df_regions do DataFrame df
df = df[~df['Entity'].isin(df_not_a_country['Not a Country'])]

# Exibir o DataFrame após a eliminação
print("\nDataFrame após a eliminação:")
df

"""#### 2.2 Limpeza e Transformação de Dados Necessários

*Para facilitar a manipulação das colunas, abreviamos Deaths - Neoplasms - Sex: Both - Age para **DNS**
"""

df = df.rename(columns={ "Deaths - Neoplasms - Sex: Both - Age: Under 5 (Rate)": "DNS < 5",
                "Deaths - Neoplasms - Sex: Both - Age: Age-standardized (Rate)": "DNS Padronizado",
                "Deaths - Neoplasms - Sex: Both - Age: All Ages (Rate)": "DNS all ages",
                "Deaths - Neoplasms - Sex: Both - Age: 70+ years (Rate)" : "DNS > 70",
                "Deaths - Neoplasms - Sex: Both - Age: 5-14 years (Rate)" : "5 < DNS < 14",
                "Deaths - Neoplasms - Sex: Both - Age: 50-69 years (Rate)" : "50 < DNS < 69",
                "Deaths - Neoplasms - Sex: Both - Age: 15-49 years (Rate)" : "15 < DNS < 49",
                 "Entity":"Country" })

df

"""Vamos alterar a ordem das colunas com DNS, para facilitar a leitura"""

#Verificando as colunas com .keys()
df.keys()

nova_ordem = ['Country', 'Code', 'Year', 'DNS < 5', '5 < DNS < 14', '15 < DNS < 49','50 < DNS < 69', 'DNS > 70', 'DNS all ages',  'DNS Padronizado']

# Selecionar as colunas na ordem desejada
df = df[nova_ordem]
df

"""*Alinhamento das colunas*


"""

df.head().style.set_table_styles([dict(selector='th', props=[('text-align', 'center')]),
                                    dict(selector='td', props=[('text-align', 'center')])])

#Verificando a existência de valores NaN  e se isso vai interferir
df.info()

"""Não há valores NaN nas colunas DNS. Há apenas na coluna Code

#### 2.3 Medidas de Centralidade

##### Medias
"""

#medias das taxas de mortalidade de acordo com o país e o grupo etário

colunas = df.columns[3:]

means = {}

for coluna in colunas:
    means[coluna] = df.groupby('Country')[coluna].mean().sort_values()

    # Exibir as medias calculadas para cada coluna
for coluna, medias in means.items():
    print(f"Media da coluna '{coluna}':")
    print(medias)
    print()

"""### Países Latinos"""

paises_latina = ['Argentina', 'Belize', 'Bolivia', 'Brazil', 'Chile', 'Colombia', 'Costa Rica', 'Cuba',
                 'Dominican Republic', 'Ecuador', 'El Salvador', 'Guatemala', 'Haiti', 'Honduras',
                 'Mexico', 'Nicaragua', 'Panama', 'Paraguay', 'Peru', 'Suriname', 'Uruguay', 'Venezuela']

df_latina = df[df['Country'].isin(paises_latina)]

df_latina

"""#Respondendo às Perguntas

###1) Qual a faixa etária que mais morre nesses países? 

---
"""

# Calculando as médias do df_chosen
colunas_chosen = df_maior_menor.columns[3:]

means_chosen = {}

for coluna_chosen in colunas_chosen:
    means_chosen[coluna_chosen] = df_maior_menor.groupby('Country')[coluna_chosen].mean().sort_values()

    
for coluna_chosen, medias_chosen in means_chosen.items():
    print(f"Media da coluna '{coluna_chosen}':")
    print(medias_chosen)
    print()

# Criar um dicionário vazio para armazenar as médias
means_chosen = {}

# Calcular as médias para cada coluna selecionada
for coluna_chosen in colunas_chosen:
    means_chosen[coluna_chosen] = df_maior_menor.groupby('Country')[coluna_chosen].mean()

# Criar um dataframe com as médias e os nomes das colunas e países
df_heatmap = pd.DataFrame(means_chosen)

# Criar o heatmap usando o seaborn
sns.heatmap(df_heatmap, annot=False, cmap='YlGnBu')

# Adicione rótulos aos eixos
plt.xlabel('Colunas')
plt.ylabel('Country')

plt.show()

"""###2) Para cada faixa etária, qual o país com a maior taxa?



---

####Menor que 5 anos
"""

#menor que 5 anos

df_maior_menor = df.loc[(df["Country"].isin(top3_maior_menor.index))]
sns.lineplot(data=df_maior_menor, x="Year", y="DNS < 5", linewidth=2.5, palette="tab10", hue="Country")

#Afghanistan

"""####Entre 5 e 14"""

df_maior_menor = df.loc[(df["Country"].isin(top3_maior_menor.index))]
sns.lineplot(data=df_maior_menor, x="Year", y="5 < DNS < 14", linewidth=2.5, palette="tab10", hue="Country")

#Afghanistan

"""####Entre 15 e 49"""

df_maior_menor = df.loc[(df["Country"].isin(top3_maior_menor.index))]
sns.lineplot(data=df_maior_menor, x="Year", y="15 < DNS < 49", linewidth=2.5, palette="tab10", hue="Country")

"""####Entre 50 e 69"""

df_maior_menor = df.loc[(df["Country"].isin(top3_maior_menor.index))]
sns.lineplot(data=df_maior_menor, x="Year", y="50 < DNS < 69", linewidth=2.5, palette="tab10", hue="Country")

"""####Maior que 70 anos"""

df_maior_menor = df.loc[(df["Country"].isin(top3_maior_menor.index))]
sns.lineplot(data=df_maior_menor, x="Year", y="DNS > 70", linewidth=2.5, palette="tab10", hue="Country")

"""### 3) Qual o país mais constante?

---




"""

for a in top3_maior_menor.index:
  df_lugar= df.loc[(df["Country"]==a)]

  sns.barplot(data=df_lugar, x="Year", y="DNS all ages").set(title=a)
  plt.xticks(rotation=55)
  plt.show(block=True)

  #Kiribati

"""###4) Qual o país com maior queda de casos entre 2015 e 2019?

---

####Regressão Linear
"""

plt.figure(figsize = (10, 8))


for a in top3_maior_menor.index:
  df_lugar= df.loc[(df["Country"]==a) & (df["Year"]>=2015)]

  # Define o tema do gráfico
  sns.set_theme()

  # Cria o gráfico de dispersão com a Reta de regressão
  sns.regplot(data=df_lugar, x="Year", y="DNS all ages", label=a)
  
plt.legend()


#Guinea

"""###5) Qual o país teve um maior crescimento, e qual país teve o maior decrescimento, em suas taxas ao passar dos anos?

---




"""

plt.figure(figsize = (10, 8))

for a in top3_maior_menor.index:
  df_lugar= df.loc[(df["Country"]==a)]

  # Define o tema do gráfico
  sns.set_theme()

  # Cria o gráfico de dispersão com a Reta de regressão
  sns.regplot(data=df_lugar, x="Year", y="DNS all ages", label=a)
  
plt.legend()

#Maior crescimento: Cuba
#Maior decrescimento: Afghanistan

"""###6) No ano com menos casos globais, quais, entre os países pré determinados, tiveram maiores e menores, investimento público em saúde?

"""

#Ano com mais baixas entre 2002 - 2019

df_filtrado = df[df['Year'] >= 2002]
soma_casos_ano = df_filtrado.groupby('Year')['DNS all ages'].sum()
ano_menos_casos = soma_casos_ano.idxmin()

#ano_menos_casos => menor = 2002

rotulos_paises = ["Afghanistan", "Brunei", "Cuba", "D.R. of Congo", "Guinea", "Kiribati"]

df_chosen_2002 = df_chosen.loc[(df_he["Year"] == 2002)]
ax = sns.barplot(data=df_chosen_2002, x="Country", y="GHE")
ax.set_xticklabels(rotulos_paises, rotation=45)


#Ano com mais baixas: 2002
#País com maior investimento:
#País com menor investimento:

"""#Conclusões"""